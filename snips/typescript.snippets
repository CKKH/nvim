# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet ddi "jest 2 x describe 1 x it blocks"
describe('controllerName', () => {
	describe('context', () => {
		it('returns something', async () => {
			const { request, response, next } = makeRequestHandlerArguments();
			request.body = { id: '1' };
			request.params = { id: '1' };
			request.query = { id: '1' };

			(function as jest.Mock).mockResolvedValueOnce({});

			(functionThrowError as jest.Mock).mockImplementationOnce(() => {
				throw new Error();
			});

			await controller(request, response, next);
			expect(response.json).toHaveBeenCalledWith({});

			await expect(controller(request, response, next)).rejects.toThrowError(
				Error,
			);
		});
	});
});
endsnippet

snippet di "jest 1 x describe 1 x it blocks"
describe('context', () => {
	it('returns something', async () => {
		const { request, response, next } = makeRequestHandlerArguments();
		request.body = { id: '1' };
		request.params = { id: '1' };
		request.query = { id: '1' };

		(function as jest.Mock).mockResolvedValueOnce({});

		(functionThrowError as jest.Mock).mockImplementationOnce(() => {
			throw new Error();
		});

		await controller(request, response, next);
		expect(response.json).toHaveBeenCalledWith({});

		await expect(controller(request, response, next)).rejects.toThrowError(
			Error,
		);
	});
});
endsnippet

snippet i "jest 1 x it block"
it('returns something', async () => {
	const { request, response, next } = makeRequestHandlerArguments();
	request.body = { id: '1' };
	request.params = { id: '1' };
	request.query = { id: '1' };

	(function as jest.Mock).mockResolvedValueOnce({});

	(functionThrowError as jest.Mock).mockImplementationOnce(() => {
		throw new Error();
	});

	await controller(request, response, next);
	expect(response.json).toHaveBeenCalledWith({});

	await expect(controller(request, response, next)).rejects.toThrowError(
		Error,
	);
});
endsnippet
